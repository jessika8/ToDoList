{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","userInput","tasks","onChangeHandler","event","setState","target","value","removeToDo","index","console","log","splice","addToDo","alert","allTasks","this","map","task","className","onClick","Date","getDate","getMonth","getFullYear","type","name","placeholder","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPAIqBA,G,iNACnBC,MAAQ,CACNC,UAAW,GACXC,MAAO,I,EAGTC,gBAAkB,SAACC,GACjB,EAAKC,SAAS,CACZJ,UAAWG,EAAME,OAAOC,S,EAK5BC,WAAa,SAACC,GACZC,QAAQC,IAAI,qBAGZ,EAAKX,MAAME,MAAMU,OAAOH,EAAO,GAC/B,EAAKJ,SAAS,CACZH,MAAO,EAAKF,MAAME,S,EAMtBW,QAAU,WACRH,QAAQC,IAAI,yBACiB,KAAzB,EAAKX,MAAMC,UACba,MAAM,uBAER,EAAKT,SAAS,CACZH,MAAM,GAAD,mBAAM,EAAKF,MAAME,OAAjB,CAAwB,EAAKF,MAAMC,YACxCA,UAAW,M,wEAeL,IAAD,OAEDc,EAAWC,KAAKhB,MAAME,MAAMe,KAAI,SAACC,EAAMT,GAE3C,OAAO,wBAAIF,MAAOE,GACLS,EACD,4BAAQC,UAAU,aAAaC,QAAS,kBAAM,EAAKZ,WAAWC,KAA9D,SAId,OAEE,yBAAKU,UAAU,aACf,yBAAKA,UAAU,QACf,6BAAM,IAAIE,MAAOC,UAAjB,KACA,6BAAM,IAAID,MAAOE,WAAa,EAA9B,KACA,6BAAM,IAAIF,MAAOG,gBAEf,2BAAOL,UAAU,QAAQM,KAAK,OAAOC,KAAK,YAAYC,YAAY,OAAOpB,MAAOS,KAAKhB,MAAMC,UAAW2B,SAAUZ,KAAKb,kBAErH,yBAAKgB,UAAU,cACf,4BAAQA,UAAU,YAAYC,QAASJ,KAAKH,SAA5C,aAIA,yBAAKM,UAAU,eACdJ,Q,GAzEwBc,cCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2e5cad51.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './App.css';\r\n\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    userInput: \"\",\r\n    tasks: [],\r\n\r\n  }\r\n  onChangeHandler = (event) => {\r\n    this.setState({\r\n      userInput: event.target.value\r\n\r\n    })\r\n  }\r\n\r\n  removeToDo = (index) => {\r\n    console.log(\"delete is working\")\r\n    // index - this parameter is the index which start modifying the array (with origin at 0).\r\n    // 1 - The number of elements to be removed from the starting index.\r\n    this.state.tasks.splice(index, 1)\r\n    this.setState({\r\n      tasks: this.state.tasks\r\n\r\n    })\r\n\r\n  }\r\n\r\n  addToDo = () => {\r\n    console.log(\"Add Button is working\")\r\n    if (this.state.userInput === \"\") {\r\n      alert(\"Please enter a TASK\")\r\n    } else {\r\n    this.setState({\r\n      tasks: [...this.state.tasks, this.state.userInput],\r\n      userInput: \"\"\r\n    })\r\n  }\r\n  }\r\n\r\n  // clear = () => {\r\n  //   console.log(\"Clear button is working\")\r\n  //   this.setState({\r\n  //     userInput: \"\"\r\n  //   })\r\n  // }\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n    const allTasks = this.state.tasks.map((task, index) => {\r\n      // return <h1>{task}</h1>\r\n      return <li value={index}>\r\n                  {task}\r\n                  <button className=\"listButton\" onClick={() => this.removeToDo(index)}>x</button>\r\n               </li>\r\n    })\r\n\r\n    return (\r\n\r\n      <div className=\"wholeBody\" >\r\n      <div className=\"date\">\r\n      <h1>{(new Date().getDate())}.</h1>\r\n      <h1>{(new Date().getMonth() + 1)}.</h1>\r\n      <h1>{(new Date().getFullYear())}</h1>\r\n      </div>\r\n        <input className=\"input\" type=\"text\" name=\"searchbar\" placeholder=\"ToDo\" value={this.state.userInput} onChange={this.onChangeHandler} />\r\n\r\n        <div className=\"twoButtons\">\r\n        <button className=\"buttonAdd\" onClick={this.addToDo} >Add Task</button>\r\n        {/* <button className=\"buttonClear\" onClick={this.clear}>Clear</button> */}\r\n        </div>\r\n\r\n        <div className=\"displayTask\">\r\n        {allTasks}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}